#Method	Name:String	Type:Type	Description:String	Returns:String	Example:String
#Parameter	Name:String	Type:Type	Description:String	Default:String	Choices:List
#SubMethod	Name:String				
Method	Area	Double	Get the area of a polygon	Square metres	=Area({{48.8577953, 2.2919178}, {48.8601066, 2.2951631}, {48.8538506, 2.3047225}, {48.8516625, 2.3014853}}) = 339422.50
Parameter	points	Range	A N*2 array of Latitudes and Longitudes		
					
Method	Azimuth	Double	Get the bearing from one place to another	Bearing or a 2-cell array initial and final bearing	=Azimuth(48.856614, 2.3522219, 43.296482, 5.36978) = 153.208
Parameter	originlat	Double	Latitude of origin		{-90,90}
Parameter	originlong	Double	Longitude of origin		{-180,180}
Parameter	destlat	Double	Latitude of destination		{-90,90}
Parameter	destllong	Double	Longitude of destination		{-180,180}
					
Method	Color	String	Convert a Color to hexadecimal	Hexadecimal Color	=Color("LightSteelBlue", "rgb") = "B0C4DE"
Parameter	Color	String	A Color name or 6-character hex Color code		
Parameter	format	String	A combination of letters #ARGB	#RGB	
					
Method	Displace	Double	Find a point that is offset by a bearing and a distance	LatLon or a 2-cell array lat lon	=Displace(48.856614, 2.3522219, 158.208779697697, 660495.456719927/2) = 46.087160,3.9368456
Parameter	latitude	Double	Latitude of origin		{-90,90}
Parameter	longitude	Double	Longitude of origin		{-180,180}
Parameter	bearing	Double	Bearing of offset		{-360,360}
Parameter	distance	Double	Distance to offset		{0}
					
Method	Distance	Double	Get the straight-line distance between 2 points. Calculated using Vincenty's formulae, which has sub-millimeter precision	Distance in meters	=Distance(51.508039, -0.128069, 51.5098597, -0.1342809) = 476.476
Parameter	originlat	Double	Latitude of origin		{-90,90}
Parameter	originlong	Double	Longitude of origin		{-180,180}
Parameter	destlat	Double	Latitude of destination		{-90,90}
Parameter	destlLong	Double	Longitude of destination		{-180,180}
					
Method	DMS	Double	Convert Degrees-Minutes-Seconds to degrees	Decimal degrees	=DMS("136° 58"" 19'") = 136.97194
Parameter	dms	String	A Latitude/Longitude in Degrees° Minutes"" Seconds'. Note the symbols ° "" '		
					
Method	Draw	String	Draw a circle / line / marker on the map	The name of the drawn geometry	
SubMethod	DrawingFunctions				
					
Method	Formulae	String	Gets a cell's formula with references replaced by their values	Formula	=Formulae($F$29) = Geocode("postal_code", "Trafalgar square")
Parameter	cell	String	The cell for which the formula is desited		
					
Method	Geocode	String	Get Geodesic information		=Geocode("postal_code", "Trafalgar square") = "WC2N 5DS"
Parameter	request	String	The type of information to return		{"GeoFields()"}
Parameter	place	String	The place for which the information is to be obtained		
					
Method	Geodesix		Functions to manipulate parameters and settings		
SubMethod	GeodesixFunctions				
					
Method	GeoReverse	String	Perform a reverse geocode		=GeoReverse("formatted_address", 51.508039, -0.128069) = "Greater London, UK"
Parameter	request	String	The type of information to return		{"GeoFields()"}
Parameter	latitude	Double	Latitude		{-90,90}
Parameter	longitude	Double	Longitude		{-180,180}
					
Method	Heat	String	Get a Color from a range of values to make a Heat-map. The colours returned are adjusted so as to appear linear to human perception	Hexadecimal Color	=Heat(5, 1, 10) = "99F0000"
Parameter	value	Double	A value in the range minimum .. maximum		
Parameter	minimum	Double	Lowest value of range		
Parameter	maximum	Double	Highest value of range		
					
Method	JavaScript	String	Execute a Javascript function on the browser in the Geodesix pane		=JavaScript("alert('Hello world!'")
Parameter	function	String	Any Javascript function		
					
Method	PlusCode	String	Convert lat/long to/from Google PlusCodes	PlusCode	=PlusCode("9C3XGV5C+6Q", "latitude") = 51.5080625
Parameter	latitude	Double	A Latitude to convert to a PlusCode		{-90,90}
Parameter	longitude	Double	A Longitude to convert to a PlusCode		{-180,180}
Parameter	length	Integer	The desired length of the PlusCode		
					
Method	Regex	String	Parse a string with a regular expression	Parsed value	=Regex("22.7,33.2 44.7", "([+-]?[0-9]*(\.[0-9]*))", 1, 0) = "33.2"
Parameter	string	String	A string to parse		
Parameter	pattern	String	A regular expression		
Parameter	group	Integer	Index of group to retrieve: 0 ..N		
Parameter	item	Integer	Index of item in group: 0 ..N		
					
Method	TimeOffset	Double	Get the UTC time offset at a Latitude and Longitude	The time offset in days, an Excel Time value, to be added to a Date. Note: When formatted as a time, Excel doesn't negative values (west of Greenwich) correctly	=TimeOffset(-35.2757878, 149.130732) = 10:00:00
Parameter	latitude	Double	Latitude		{-90,90}
Parameter	longitude	Double	Longitude		{-180,180}
					
Method	TimeZone	String	Get the time zone at a Latitude and Longitude	The name of the time zone	=TimeZone(-35.2757878, 149.130732) = "Australia/Sydney"
Parameter	latitude	Double	Latitude		{-90,90}
Parameter	longitude	Double	Longitude		{-180,180}
					
Method	Travel	Double	Get travelling distances and times	Distance in metres or Time in days	=Travel("Duration", "Trafalgar Square", "Picadilly Circus", "Bicycling") = 00:04:53
Parameter	type	String	Distance or Duration		{"Distance","Duration"}
Parameter	origin	String	Origin, name of a place		
Parameter	destination	String	Destination, name of a place		
Parameter	mode	String	Mode of travel		{ "Transit","Driving","Walking","Bicycling"}
