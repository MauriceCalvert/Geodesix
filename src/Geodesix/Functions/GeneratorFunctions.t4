<#+
Public Class GeneratorFunctions
    Inherits Generator

    Public Sub New(title As String,
                   tt as TextTransformation,
                   masterfile As String,
                   templatefile As String,
                   outputfile As String,
                   optional subfunction as string = "")

        MyBase.New(title, tt, masterfile, templatefile, subfunction)

    End Sub

    Public Overrides Sub Prologue()
    End Sub

    Public Overrides Sub Body(line As Line)

        Select Case line.Noun

            Case "Method"
                FlushMethod()
                Method = line

            Case "Parameter"
                Method.Children.Add(line)

            Case "SubMethod"
                Method.SubMethod = line.Keys("Name")

        End Select
    End Sub
    Private Method As Line
    Private Methods As New List(Of Line)
    Public Overrides Sub Epilogue()

        FlushMethod()

        For m As Integer = 0 To Methods.Count - 1

            Dim method As Line = Methods(m)

            WriteLine($"New Method(excel, {method.Arguments}, {{")

            For p As Integer = 0 To method.Children.Count - 1

                Dim parameter As Line = method.Children(p)

                Dim pcomma As String = If(p = method.Children.Count - 1, "", ",")

                WriteLine($"New Parameter(excel, {parameter.Arguments}){pcomma}")
            Next
            
            Dim sm As String = ""
            If method.SubMethod <> "" Then
                sm = $",SubMethods:=New {method.SubMethod}(Excel)"
            End If

            Dim mcomma As String = If(m = Methods.Count - 1, "", ",")

            WriteLine($"}}{sm}){mcomma}")
        Next

    End Sub
    Private Sub FlushMethod()

        If Method IsNot Nothing Then
            Methods.Add(Method)
            Method = Nothing
        End If

    End Sub
End Class
#>